package com.criticalityworkbench.huffmancoding;
/* 
 * Reference Huffman coding
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/reference-huffman-coding
 * https://github.com/nayuki/Reference-Huffman-coding
 */

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;


/**
 * Decompression application using static Huffman coding.
 * <p>Usage: java HuffmanDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "HuffmanCompress" application.</p>
 */
public final class HuffmanDecompress {
	
	// To allow unit testing, this method is package-private instead of private.
	static CanonicalCode readCodeLengthTable(BitInputStream in) throws IOException {
		int[] codeLengths = new int[257];
		for (int i = 0; i < codeLengths.length; i++) {
			// For this file format, we read 8 bits in big endian
			int val = 0;
			for (int j = 0; j < 8; j++)
				val = (val << 1) | in.readNoEof();
			codeLengths[i] = val;
		}
		return new CanonicalCode(codeLengths);
	}
	
	
	// To allow unit testing, this method is package-private instead of private.
	public static StringOutputStream decompress(BitInputStream in) throws IOException {
		CanonicalCode canonCode = readCodeLengthTable(in);
		CodeTree code = canonCode.toCodeTree();

		//in.reset();
		HuffmanDecoder dec = new HuffmanDecoder(in);
		dec.codeTree = code;
		StringOutputStream out = new StringOutputStream();	
		
		try{	
			while (true) {
				int symbol = dec.read();
				if (symbol == 256)  // EOF symbol
					break;
				out.write(symbol);
			}
		} finally {
			out.close();
			return out;
		}
	}
	
}
